#!/usr/bin/env python3
"""
Convert Barkuni WEBM files to WAV for voice playback
"""

from pathlib import Path
import subprocess
import os

def convert_webm_to_wav_simple():
    """Convert WEBM files to WAV using simple method"""

    raw_dir = Path("data/raw_audio")
    wav_dir = Path("data/barkuni_wav")
    wav_dir.mkdir(exist_ok=True)

    webm_files = list(raw_dir.glob("barkuni_*.webm"))

    if not webm_files:
        print("No Barkuni WEBM files found!")
        return []

    print(f"Converting {len(webm_files)} Barkuni audio files to WAV...")

    converted_files = []

    # Try using pydub for conversion
    try:
        from pydub import AudioSegment

        for i, webm_file in enumerate(webm_files, 1):
            try:
                wav_file = wav_dir / f"{webm_file.stem}.wav"

                print(f"Converting {i}/{len(webm_files)}: {webm_file.name}")

                # Load WEBM and convert to WAV
                audio = AudioSegment.from_file(str(webm_file), format="webm")

                # Optimize for voice: mono, 22kHz
                audio = audio.set_channels(1)  # Mono
                audio = audio.set_frame_rate(22050)  # Standard voice rate

                # Export as WAV
                audio.export(str(wav_file), format="wav")
                converted_files.append(wav_file)

                print(f"  ‚úÖ Converted: {wav_file.name}")

            except Exception as e:
                print(f"  ‚ùå Failed: {webm_file.name} - {e}")

    except ImportError:
        print("pydub not available for conversion")
        return []

    print(f"\nConversion complete! {len(converted_files)} files ready.")
    return converted_files

def test_wav_playback():
    """Test if WAV files can be played"""

    wav_dir = Path("data/barkuni_wav")
    wav_files = list(wav_dir.glob("*.wav"))

    if not wav_files:
        print("No WAV files found to test")
        return False

    print("Testing WAV playback...")

    try:
        import pygame

        pygame.mixer.init(frequency=22050, size=-16, channels=1, buffer=1024)

        # Test first file
        test_file = wav_files[0]
        print(f"Testing: {test_file.name}")

        pygame.mixer.music.load(str(test_file))
        pygame.mixer.music.play()

        # Wait a bit
        import time
        time.sleep(2)

        pygame.mixer.music.stop()

        print("‚úÖ WAV playback test successful!")
        return True

    except Exception as e:
        print(f"WAV playback test failed: {e}")
        return False

def create_barkuni_voice_player():
    """Create simple Barkuni voice player"""

    print("Creating Barkuni Voice Player...")

    wav_dir = Path("data/barkuni_wav")
    wav_files = list(wav_dir.glob("*.wav"))

    if not wav_files:
        print("No WAV files available. Run conversion first.")
        return None

    import pygame
    import random
    import time

    class BarkuniPlayer:
        def __init__(self, wav_files):
            self.wav_files = wav_files
            pygame.mixer.init(frequency=22050, size=-16, channels=1, buffer=1024)

        def play_random_clip(self):
            """Play random Barkuni voice clip"""
            try:
                clip = random.choice(self.wav_files)
                print(f"üé§ Playing authentic Barkuni: {clip.name}")

                pygame.mixer.music.load(str(clip))
                pygame.mixer.music.play()

                # Wait for playback
                while pygame.mixer.music.get_busy():
                    time.sleep(0.1)

                return True

            except Exception as e:
                print(f"Playback error: {e}")
                return False

    player = BarkuniPlayer(wav_files)

    # Test the player
    print("Testing Barkuni voice player...")
    success = player.play_random_clip()

    if success:
        print("‚úÖ Barkuni voice player working!")
    else:
        print("‚ùå Barkuni voice player failed")

    return player

def main():
    """Main conversion and setup"""

    print("Barkuni Audio Conversion System")
    print("Converting WEBM to WAV for authentic voice playback")
    print("=" * 60)

    # Step 1: Convert WEBM to WAV
    converted_files = convert_webm_to_wav_simple()

    if not converted_files:
        print("‚ùå Conversion failed - no audio files available")
        return

    # Step 2: Test WAV playback
    playback_works = test_wav_playback()

    # Step 3: Create voice player
    if playback_works:
        player = create_barkuni_voice_player()

        if player:
            print("\n" + "=" * 60)
            print("üéâ SUCCESS: Authentic Barkuni Voice Ready!")
            print()
            print("‚úÖ 60 Barkuni audio files converted to WAV")
            print("‚úÖ Voice playback system working")
            print("‚úÖ Random authentic voice clips available")
            print()
            print("Your chatbot can now use Barkuni's REAL VOICE!")

    else:
        print("‚ùå Audio playback system not working")

if __name__ == "__main__":
    main()